library(gam)
# run the model
gam1=gam(wage~s(age,df=6)+s(year,df=3)+education ,data = Wage)
# plot the results
par(mfrow=c(1,3)) #to partition the Plotting Window
plot(gam1,se = TRUE)
library(gam)
# run the model
gam1=gam(wage~s(age,df=4)+s(year,df=3)+education ,data = Wage)
# plot the results
par(mfrow=c(1,3)) #to partition the Plotting Window
plot(gam1,se = TRUE)
Wage$Cat = 0
case = which(Wage$wage > 250)
Wage$Cat[case] = 1
hist(Wage$wage)
hist(Wage$wage)
summary(Wage$wage)
# Create 2 categories: Wage < 250 and Wage >250
Wage$Cat = 0
case = which(Wage$wage > 128.68)
Wage$Cat[case] = 1
logitgam1 = gam(Cat ~ s(age,df=4) + s(year,df=4) + education ,data=Wage, family=binomial)
plot(logitgam1,se=T)
# build the model
par(mfrow=c(1,3))
logitgam1 = gam(Cat ~ s(age,df=4) + s(year,df=4) + education ,data=Wage, family=binomial)
plot(logitgam1,se=T)
par(mfrow=c(1,3))
logitgam1 = gam(Cat ~ s(age,df=4) + s(year,df=2) + education ,data=Wage, family=binomial)
plot(logitgam1,se=T)
34+45 =
a = 3
b = 4
c = a+b
print(c)
3/4 * 2/5
Jiawei = function(input){
if (input>3){
print("you are dumb")
}else{
print("stupid")
}
}
Jiawei(input = 1234567890)
for (i in 1:10){
print(i)
}
for (i in 1:10){
Jiawei(input=i)
}
i = 1
while (i < 10){
i = i+1
print(i)
}
i = 1
while (i < 10){
i = i+1
Jiawei(input=i)
}
i = 1
while (i < 100){
i = i+1
Jiawei(input=i)
}
i = 1
while (i < 99999){
i = i+1
Jiawei(input=i)
}
Question = function(name){
if (name=="Jiawei"){
print("finally, you are correct")
}else{
print("oh, you don't even know your name?")
}
}
Question("QWERTYUIOP{}")
Question("1234567890000000000000000000000000000")
Question("Jiawei")
j = 1
for (i in 1:20){
if (j<10){
print(j)
j = j+1
}else{
j = j-1
print(j)
}
}
j = 1
for (i in 1:20){
if (i<10){
print(j)
j = j+1
}else{
j = j-1
print(j)
}
}
j = 1
for (i in 1:19){
if (i<10){
print(j)
j = j+1
}else{
j = j-1
print(j)
}
}
j = 1
for (i in 1:19){
if (i<=10){
print(j)
j = j+1
}else{
j = j-1
print(j)
}
}
j = 1
for (i in 1:19){
if (i<=10){
print(j)
j = j+1
}else{
j = j-1
print(j)
}
if (j==5){
print("knock, knock. who is there?. JoMaMa.")
print("JoMaMa, who?")
print("JoMaMa, so fat he can't fit threw my door!")
}else{
print("why did the minus sign feel sad? a:because he is negative")
}
}
set.seed(1)
x1<-runif(100)
x2<-0.5*x1+rnorm(100) / 10
y<-2+2*x1+0.3*x2+rnorm(100)
plot(x1,x2)
corr(x1, x2)
cor(x1, x2)
data=data.frame( c(x1,x2,y) )
data
head(data)
data=data.frame( cbind(x1,x2,y) )
head(data)
data=data.frame( cbind(x1,x2,y) )
model = lm(yz~., data)
data=data.frame( cbind(x1,x2,y) )
model = lm(y~., data)
summary(model)
data=data.frame( cbind(x1,x2,y) )
model = lm(y~., data)
summary(model)
model = lm(y~x1, data)
summary(model)
model = lm(y~x2, data)
summary(model)
x1<-c(x1, 0.1)
x2<-c(x2, 0.8)
y<-c(y, 6)
data=data.frame( cbind(x1,x2,y) )
model = lm(y~., data)
plot(model)
dim(data)
tail(data)
model = lm(y~x1, data)
plot(model)
data=data.frame( cbind(x1,x2,y) )
model = lm(y~., data)
summary(model)
data=data.frame( cbind(x1,x2,y) )
model = lm(y~., data)
plot(model)
dim(data)
model = lm(y~x1, data)
plot(model)
model = lm(y~x1, data)
plot(model)
model = lm(y~x2, data)
plot(model)
library(lasso2)
data(Prostate)
head(Prostate)
data = Prostate
head(data)
library(lasso2)
data(Prostate)
head(Prostate)
data = Prostate[,c(1:8)] # only the first 8 columns contain features
for (i in 1:ncol(data)){
data[,i]=(data[,i]-mean(data[,i]))/sqrt(var(data[,i]))
}
pr.out = prcomp(data, scale=FALSE)
pr.out = prcomp(data, scale=FALSE)
pr.out[,1:2] # only keeping the first two columns
pr.out
class(pr.out)
summary(pr.out)
attributes(pr.out)
pr.out$rotation
pr.out$rotation[,1:2]
pr.out
pr.out$rotation[,1:2] # only keeping the first two columns
biplot(pr.out,scale=0,var.axes = TRUE)
library(lasso2)
data(Prostate)
data = Prostate
X = data[,1:8]
# data standardization
for (i in 1:ncol(X)){
X[,i]=(X[,i]-mean(X[,i]))/sqrt(var(X[,i]))
}
# PCA on "data"
pr.out = prcomp(X, scale=FALSE)
PVE = pr.out$sdev^2/sum(pr.out$sdev^2)
barplot(PVE, names=paste("Z", 1:8, sep=" "))
PVE = round(PVE,2)
par(mar=c(4,4,4,4))
pc = barplot(PVE,
width = 1, space = 0.2, border = NA, axes = F,
ylim = c(0, 1.05 * max(PVE, na.rm = T)),
ylab = "PVE" , cex.names = 0.7,
names.arg = paste("PC", 1:length(PVE), sep=" "),
main = "Pareto Chart")
axis(side = 2, at = c(0, PVE), las = 1, col.axis = "black", col = "grey62", tick = T, cex.axis = 0.8)
## frame plot
box( col = "grey62")
px <- cumsum(PVE) * max(PVE, na.rm = T)
lines(pc, px, type = "b", cex = 0.7, pch = 19, col="cyan4")
## Annotate Right Axis
axis(side = 4, at = c(0, px), labels = paste(c(0, round(cumsum(PVE)* 100)) ,"%",sep=""),
las = 1, col.axis = "grey62", col = "cyan4", cex.axis = 0.8, col.axis = "cyan4")
Z = data.frame( pr.out$x[,1:8]) # keep the first 5 PC
data.new = Z
data.new$y = data$lpsa
# PC regression
fit.pcr = lm(y~., data.new)
summary(fit.pcr)
fit.pcr2 = lm(y~PC1+PC3, data.new)
summary(fit.pcr2)
fit.pcr3 = lm(y~PC1+PC3+PC6+PC7+PC8, data.new)
summary(fit.pcr3)
n = nrow(data) # sample size
mse = array()
for (i in 1:500){
train.case = sample(n, 70, replace=FALSE)
test.case = c(1:n)[-train.case]
# PC regression
Z = data.frame( pr.out$x[,c(1,3,6,7,8)]) # keep the first 3 PC
data.new = Z
data.new$y = data$lpsa
train.data = data.new[train.case,]
test.data = data.new[test.case,]
# Build the model
fit.pcr = lm(y~., train.data)
pred = predict(fit.pcr, test.data)
obs = test.data[,"y"] # the true lpsa values
plot(obs,pred)
mse[i] = mean( (pred-obs)^2 )
}
boxplot(mse)
summary(mse)
data(USArrests)
data = USArrests
for (i in 1:ncol(data)){
data[,i]=(data[,i]-mean(data[,i]))/sqrt(var(data[,i]))
}
pr.out = prcomp(data, scale=FALSE)
PVE = pr.out$sdev^2/sum(pr.out$sdev^2)
barplot(PVE, names=paste("Z", 1:4, sep=" "))
library(lasso2)
data(Prostate)
data = Prostate
X = data[,1:8]
head(data)
for (i in 1:ncol(X)){
X[,i]=(X[,i]-mean(X[,i]))/sqrt(var(X[,i]))
}
pr.out = prcomp(X, scale=FALSE)
PVE = pr.out$sdev^2/sum(pr.out$sdev^2)
barplot(PVE, names=paste("Z", 1:8, sep=" "))
PVE = round(PVE,2)
par(mar=c(4,4,4,4))
pc = barplot(PVE,
width = 1, space = 0.2, border = NA, axes = F,
ylim = c(0, 1.05 * max(PVE, na.rm = T)),
ylab = "PVE" , cex.names = 0.7,
names.arg = paste("PC", 1:length(PVE), sep=" "),
main = "Pareto Chart")
## anotate left axis
axis(side = 2, at = c(0, PVE), las = 1, col.axis = "black", col = "grey62", tick = T, cex.axis = 0.8)
## frame plot
box( col = "grey62")
## Cumulative Frequency Lines
px <- cumsum(PVE) * max(PVE, na.rm = T)
lines(pc, px, type = "b", cex = 0.7, pch = 19, col="cyan4")
## Annotate Right Axis
axis(side = 4, at = c(0, px), labels = paste(c(0, round(cumsum(PVE)* 100)) ,"%",sep=""),
las = 1, col.axis = "grey62", col = "cyan4", cex.axis = 0.8, col.axis = "cyan4")
barplot(PVE, names=paste("Z", 1:8, sep=" "))
PVE = round(PVE,2)
par(mar=c(4,4,4,4))
pc = barplot(PVE,
width = 1, space = 0.2, border = NA, axes = F,
ylim = c(0, 1.05 * max(PVE, na.rm = T)),
ylab = "PVE" , cex.names = 0.7,
names.arg = paste("PC", 1:length(PVE), sep=" "),
main = "Pareto Chart")
## anotate left axis
axis(side = 2, at = c(0, PVE), las = 1, col.axis = "black", col = "grey62", tick = T, cex.axis = 0.8)
## frame plot
box( col = "grey62")
## Cumulative Frequency Lines
px <- cumsum(PVE) * max(PVE, na.rm = T)
lines(pc, px, type = "b", cex = 0.7, pch = 19, col="cyan4")
## Annotate Right Axis
axis(side = 4, at = c(0, px), labels = paste(c(0, round(cumsum(PVE)* 100)) ,"%",sep=""),
las = 1, col.axis = "grey62", col = "cyan4", cex.axis = 0.8, col.axis = "cyan4")
pr.out$x
# -----------------------
Z = data.frame( pr.out$x[,1:8]) # keep the first 5 PC
data.new = Z
data.new$y = data$lpsa
head(data.new)
fit.pcr = lm(y~., data.new)
summary(fit.pcr)
fit.pcr2 = lm(y~PC1+PC3, data.new)
summary(fit.pcr2)
fit.pcr3 = lm(y~PC1+PC3+PC6+PC7+PC8, data.new)
summary(fit.pcr3)
n = nrow(data)
n
train.case = sample(n, 70, replace=FALSE)
test.case = c(1:n)[-train.case]
mse = array()
train.case
test.case
Z = data.frame( pr.out$x[,c(1,3,6,7,8)]) # keep the first 5 PC
data.new = Z
data.new$y = data$lpsa
train.data = data.new[train.case,]
test.data = data.new[test.case,]
fit.pcr = lm(y~., train.data)
fit.pcr = lm(y~., train.data)
pred = predict(fit.pcr, test.data)
pred
obs = test.data[,"y"] # the true lpsa values
obs
obs[1]
pred[1]
obs[2]
pred[2]
plot(obs,pred)
mse = array()
for (i in 1:500){
train.case = sample(n, 70, replace=FALSE)
test.case = c(1:n)[-train.case]
# PC regression
Z = data.frame( pr.out$x[,c(1,3,6,7,8)]) # keep the first 5 PC
data.new = Z
data.new$y = data$lpsa
train.data = data.new[train.case,]
test.data = data.new[test.case,]
# Build the model
fit.pcr = lm(y~., train.data)
pred = predict(fit.pcr, test.data)
obs = test.data[,"y"] # the true lpsa values
plot(obs,pred)
mse[i] = mean( (pred-obs)^2 )
}
boxplot(mse)
summary(mse)
plot(mse)
library(lasso2)
data(Prostate)
save(Prostate, file="/Users/Xiao/Desktop/2023 Spring/")
save(Prostate, file="/Users/Xiao/Desktop/2023 Spring")
save(Prostate, file="Users/Xiao/Desktop/2023 Spring/data/Prostate.RData")
save(Prostate, file="/Users/Xiao/Desktop/2023 Spring/data/Prostate.RData")
library(ElemStatLearn) # load this package so that we could use the spam data
data(spam)
save(spam, file="spam.RData")
getwd()
1405.2/3
wd = "/Users/Xiao/Desktop/FaceData/CroppedYale/train"
setwd(wd)
library(pixmap)
library(MASS)
# -----------------------------------
# obtain the file names in a folder
f.names = list.files(path = ".", pattern = ".pgm")
# obtain the number of image files.
n.file = length(f.names)
# you may read an image and plot it
plot(read.pnm(f.names[4]))
# -----------------------------------
# -----------------------------------
n = 192*168 # this is the total number of pixels of an image
# load images; each image is a row vector
data = array(0/0, dim=c(n.file, n))
for (i in 1:n.file){
tmp = read.pnm(f.names[i])
tmp = as.vector(tmp@grey)
data[i,] =  tmp
}
data.train = data
# -----------------------------------
# -----------------------------------
# Obtain the "average" face:
average = colMeans(data)
average.mat = matrix(average, nrow=192) # convert the vector back to a matrix
average.face = read.pnm(f.names[1]) # load a template image
average.face@grey = average.mat # replace the data by average.m
plot(average.face) # this is the average look computed from the 36 images
# -----------------------------------
# -----------------------------------
# Here, each face is defined by 192*168 features
# Next, we perform PCA to reduce the dimension from 192*168 to a very small number
# Step 1: we need to remove the mean before PCA
for (i in 1:n){
data[,i] = (data[,i] - mean(data[,i]))
}
# Step 2: PCA
K = 20 # we try to use only 20 features to capture the facial characteristics
pr.out = prcomp(data, scale=FALSE)
Z.matrix = pr.out$x[,1:K]
Phi.matrix = pr.out$rotation[,1:K]
# if K = 2, we could easily plot the data
if (K==2){
plot(pr.out$x[,1:K])
text(pr.out$x[,1:K], labels=1:n.file, col="red")
# looks like individual 13 and individual 34 are different
par(mfrow=c(1,2))
plot(read.pnm(f.names[13]))
plot(read.pnm(f.names[34]))
# looks like individual 33 and individual 25 look like each other
par(mfrow=c(1,2))
plot(read.pnm(f.names[25]))
plot(read.pnm(f.names[33]))
}
# if K > 2,
if (K>2){
# compute the distance from individual 25 to others
j = 25
distance = array()
for (i in 1:n.file){
distance[i] = sqrt( sum( (Z.matrix[j,] - Z.matrix[i,])^2 ) )
}
# find the person who looks like individual 25
case = which( rank(distance)<= 2 )
par(mfrow=c(1,2))
for (i in 1:2){
plot(read.pnm(f.names[case[i]]))
}
# find the person who doesn't look like individual 25
case = which( rank(distance) == n.file )
par(mfrow=c(1,2))
plot(read.pnm(f.names[25]))
plot(read.pnm(f.names[case]))
}
# Next, we will load more pictures, and find two persons that look like each other
# -----------------------------------
wd.test = "/Users/Xiao/Desktop/FaceData/CroppedYale/test"
setwd(wd.test)
# obtain the file names in a folder
f.names.test = list.files(path = ".", pattern = ".pgm")
# obtain the number of image files.
n.file.test = length(f.names.test)
# you may read an image and plot it
plot(read.pnm(f.names.test[2]))
# -----------------------------------
# -----------------------------------
# load images; each image is a row vector
data.test = array(0/0, dim=c(n.file.test, n))
for (i in 1:n.file.test){
tmp = read.pnm(f.names.test[i])
tmp = as.vector(tmp@grey)
data.test[i,] =  tmp
}
# -----------------------------------
# Step 1: we need to remove the mean before PCA
for (i in 1:n){
data.test[,i] = (data.test[,i] - mean(data.train[,i]))
}
# Step 2: reduce the dimension
Z.matrix.test = data.test %*% Phi.matrix
# Step 3: find two persons who look similar
# Compute the pair-wise distances between two persons
distance = array(0, dim=c(n.file.test, n.file.test))
for (i in 1:n.file.test){
for (j in 1:n.file.test){
distance[i,j] = sqrt(  sum( (Z.matrix.test[i,]-Z.matrix.test[j,])^2) )
}
}
print(distance)
# image 2 and 3 are similar
par(mfrow=c(1,2))
plot(read.pnm(f.names.test[2]))
plot(read.pnm(f.names.test[3]))
# image 1 is not similar to any one
rowMeans(distance)
plot(read.pnm(f.names.test[1]))
distance
par(mfrow=c(2,2))
plot(read.pnm(f.names.test[4]))
plot(read.pnm(f.names.test[5]))
plot(read.pnm(f.names.test[6]))
